name: Dependency Management

on:
  schedule:
    # Run dependency checks weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  push:
    branches: [ main, develop ]
    paths:
      - '*requirements*.txt'
      - 'pyproject.toml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '*requirements*.txt'
      - 'pyproject.toml'
  workflow_dispatch:

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install audit tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit bandit[toml]

      - name: Run safety check
        continue-on-error: true
        run: |
          echo "## Safety Check Results" >> $GITHUB_STEP_SUMMARY
          safety check --json --output safety-report.json
          
          # Parse and format results for summary
          python -c "
          import json
          import os
          
          try:
              with open('safety-report.json', 'r') as f:
                  data = json.load(f)
              
              if data.get('vulnerabilities'):
                  print('**⚠️ Security vulnerabilities found:**')
                  for vuln in data['vulnerabilities']:
                      print(f'- {vuln.get(\"package\", \"Unknown\")} {vuln.get(\"installed_version\", \"\")}')
                      print(f'  - {vuln.get(\"vulnerability\", \"No description\")}')
              else:
                  print('**✅ No known security vulnerabilities found**')
          except Exception as e:
              print(f'**❌ Error reading safety report: {e}**')
          " >> $GITHUB_STEP_SUMMARY

      - name: Run pip-audit
        continue-on-error: true
        run: |
          echo "## Pip-Audit Results" >> $GITHUB_STEP_SUMMARY
          pip-audit --format=json --output=pip-audit-report.json || echo "Pip-audit completed with warnings"
          
          # Parse and format results
          python -c "
          import json
          import os
          
          try:
              with open('pip-audit-report.json', 'r') as f:
                  data = json.load(f)
              
              vulnerabilities = data.get('vulnerabilities', [])
              if vulnerabilities:
                  print('**⚠️ Pip-audit found vulnerabilities:**')
                  for vuln in vulnerabilities:
                      print(f'- {vuln.get(\"package\", \"Unknown\")} {vuln.get(\"installed_version\", \"\")}')
                      print(f'  - ID: {vuln.get(\"id\", \"Unknown\")}')
              else:
                  print('**✅ Pip-audit found no vulnerabilities**')
          except Exception as e:
              print(f'**❌ Error reading pip-audit report: {e}**')
          " >> $GITHUB_STEP_SUMMARY

      - name: Run bandit security scan
        continue-on-error: true
        run: |
          echo "## Bandit Security Scan" >> $GITHUB_STEP_SUMMARY
          bandit -r . -f json -o bandit-report.json --exclude "./venv/*,./tests/*" || echo "Bandit scan completed"
          
          # Parse and format results
          python -c "
          import json
          
          try:
              with open('bandit-report.json', 'r') as f:
                  data = json.load(f)
              
              results = data.get('results', [])
              if results:
                  high_severity = [r for r in results if r.get('issue_severity') == 'HIGH']
                  medium_severity = [r for r in results if r.get('issue_severity') == 'MEDIUM']
                  
                  if high_severity:
                      print(f'**⚠️ {len(high_severity)} high severity security issues found**')
                  if medium_severity:
                      print(f'**⚠️ {len(medium_severity)} medium severity security issues found**')
                  if not high_severity and not medium_severity:
                      print('**✅ No high or medium severity security issues found**')
              else:
                  print('**✅ Bandit found no security issues**')
          except Exception as e:
              print(f'**❌ Error reading bandit report: {e}**')
          " >> $GITHUB_STEP_SUMMARY

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            safety-report.json
            pip-audit-report.json
            bandit-report.json

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipdeptree pip-tools

      - name: Analyze dependency tree
        run: |
          echo "## Dependency Tree Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Install current dependencies
          pip install -r requirements.txt
          
          # Generate dependency tree
          echo "### Current Dependency Tree" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          pipdeptree --warn=fail >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Check for outdated packages
        run: |
          echo "### Outdated Packages" >> $GITHUB_STEP_SUMMARY
          
          # Check for outdated packages
          OUTDATED=$(pip list --outdated --format=json)
          
          python -c "
          import json
          import sys
          
          outdated = json.loads('$OUTDATED')
          
          if outdated:
              print('The following packages have newer versions available:')
              print('| Package | Current | Latest |')
              print('|---------|---------|--------|')
              for pkg in outdated:
                  print(f'| {pkg[\"name\"]} | {pkg[\"version\"]} | {pkg[\"latest_version\"]} |')
          else:
              print('**✅ All packages are up to date**')
          " >> $GITHUB_STEP_SUMMARY

      - name: Generate requirements report
        run: |
          # Create a detailed requirements report
          cat > requirements-report.md << EOF
          # Requirements Analysis Report
          
          Generated on: $(date -u)
          
          ## Production Dependencies
          \`\`\`
          $(cat requirements.txt)
          \`\`\`
          
          ## Development Dependencies
          \`\`\`
          $(cat dev-requirements.txt)
          \`\`\`
          
          ## Installed Package Versions
          \`\`\`
          $(pip freeze)
          \`\`\`
          
          ## Dependency Tree
          \`\`\`
          $(pipdeptree)
          \`\`\`
          EOF

      - name: Upload requirements report
        uses: actions/upload-artifact@v3
        with:
          name: requirements-report-${{ github.run_id }}
          path: requirements-report.md

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install license checker
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses

      - name: Install project dependencies
        run: |
          pip install -r requirements.txt

      - name: Check licenses
        run: |
          echo "## License Compliance Report" >> $GITHUB_STEP_SUMMARY
          
          # Generate license report
          pip-licenses --format=markdown --output-file=license-report.md
          
          # Check for potentially problematic licenses
          pip-licenses --format=json --output-file=licenses.json
          
          python -c "
          import json
          
          # Define license categories
          permissive_licenses = {
              'MIT', 'BSD', 'BSD-3-Clause', 'BSD-2-Clause', 'Apache', 'Apache 2.0', 
              'Apache Software License', 'ISC', 'Python Software Foundation License'
          }
          
          restrictive_licenses = {
              'GPL', 'LGPL', 'AGPL', 'Copyleft'
          }
          
          try:
              with open('licenses.json', 'r') as f:
                  data = json.load(f)
              
              permissive = []
              restrictive = []
              unknown = []
              
              for pkg in data:
                  license_name = pkg.get('License', 'Unknown')
                  pkg_name = pkg.get('Name', 'Unknown')
                  
                  if any(perm in license_name for perm in permissive_licenses):
                      permissive.append(f'{pkg_name} ({license_name})')
                  elif any(rest in license_name for rest in restrictive_licenses):
                      restrictive.append(f'{pkg_name} ({license_name})')
                  else:
                      unknown.append(f'{pkg_name} ({license_name})')
              
              print(f'**Permissive licenses:** {len(permissive)} packages')
              if restrictive:
                  print(f'**⚠️ Restrictive licenses:** {len(restrictive)} packages')
                  for pkg in restrictive:
                      print(f'  - {pkg}')
              else:
                  print(f'**✅ Restrictive licenses:** 0 packages')
              
              if unknown:
                  print(f'**❓ Unknown/Other licenses:** {len(unknown)} packages')
                  for pkg in unknown[:5]:  # Show first 5
                      print(f'  - {pkg}')
                  if len(unknown) > 5:
                      print(f'  - ... and {len(unknown) - 5} more')
              
          except Exception as e:
              print(f'**❌ Error reading license data: {e}**')
          " >> $GITHUB_STEP_SUMMARY

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports-${{ github.run_id }}
          path: |
            license-report.md
            licenses.json

  create-dependency-pr:
    name: Create Dependency Update PR
    runs-on: ubuntu-latest
    needs: [dependency-audit, dependency-analysis]
    if: github.event_name == 'schedule' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      - name: Update dependencies
        run: |
          # Backup current requirements
          cp requirements.txt requirements.txt.backup
          cp dev-requirements.txt dev-requirements.txt.backup
          
          # Create .in files for pip-tools
          cat > requirements.in << EOF
          # Core data processing
          numpy>=1.26.4,<2.0
          pandas>=2.2.3,<3.0
          
          # Data sources
          pandas-datareader>=0.10.0,<1.0
          requests>=2.31.0
          requests-cache>=1.0.0
          openpyxl>=3.1.2
          
          # Statistical modeling
          statsmodels>=0.14.4,<1.0
          scikit-learn>=1.3.2
          
          # Output formatting
          tabulate>=0.9.0,<1.0
          jinja2>=3.1.6,<4.0
          EOF
          
          cat > dev-requirements.in << EOF
          -r requirements.in
          
          # Testing
          pytest>=7.4,<8.0
          pytest-cov>=4.1,<5.0
          
          # Code quality tools
          flake8>=6.1,<7.0
          black>=23.12,<24.0
          isort>=5.13,<6.0
          pylint>=3.0,<4.0
          
          # Type checking
          mypy>=1.8,<2.0
          types-requests>=2.31,<3.0
          pandas-stubs>=2.1,<3.0
          
          # Caching
          requests-cache>=1.0.0
          EOF
          
          # Compile new requirements
          pip-compile requirements.in
          pip-compile dev-requirements.in
          
          # Check if there are changes
          if ! diff -q requirements.txt requirements.txt.backup || ! diff -q dev-requirements.txt dev-requirements.txt.backup; then
            echo "DEPENDENCIES_UPDATED=true" >> $GITHUB_ENV
          else
            echo "DEPENDENCIES_UPDATED=false" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        if: env.DEPENDENCIES_UPDATED == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update dependencies"
          title: "🔄 Automated Dependency Updates"
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated updates to project dependencies.
            
            ### Changes
            - Updated `requirements.txt` with latest compatible versions
            - Updated `dev-requirements.txt` with latest compatible versions
            
            ### Review Checklist
            - [ ] Verify all tests pass
            - [ ] Check for any breaking changes in updated packages
            - [ ] Review security scan results
            - [ ] Ensure compatibility with supported Python versions
            
            **Note:** This PR was automatically generated by the dependency management workflow.
          branch: automated-dependency-updates
          base: develop
          labels: |
            dependencies
            automated 