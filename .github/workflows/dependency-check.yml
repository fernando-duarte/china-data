name: Dependency Security Check

on:
  schedule:
    - cron: "0 2 * * 1" # Weekly Monday 2 AM
  push:
    paths: ["requirements*.txt", "pyproject.toml", "uv.lock"]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.11

      - name: Install audit tools
        run: |
          uv add --dev bandit pip-audit safety

      - name: Install project dependencies
        run: uv sync --dev

      - name: Run pip-audit vulnerability scan
        run: |
          uv run pip-audit --format=json --output=pip-audit-vulnerabilities.json || true
          uv run pip-audit --format=cyclonedx-json --output=pip-audit-sbom.json || true

      - name: Run safety vulnerability scan
        run: |
          uv run safety check --json --output safety-vulnerabilities.json || true

      - name: Run bandit security analysis
        run: |
          uv run bandit -r . -f json -o bandit-security.json --exclude "./venv/*,./tests/*" || true
          uv run bandit -r . -f sarif -o security-results.sarif --exclude "./venv/*,./tests/*" || true

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: security-results.sarif

      - name: Generate dependency tree
        run: |
          uv add --dev pipdeptree
          uv run pipdeptree --json-tree > dependency-tree.json
          uv run pipdeptree --warn silence > dependency-tree.txt

      - name: Check for outdated packages
        run: |
          uv run pip list --outdated --format=json > outdated-packages.json || true

      - name: Upload security audit reports
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: security-audit-reports
          path: |
            bandit-security.json
            dependency-tree.json
            dependency-tree.txt
            outdated-packages.json
            pip-audit-vulnerabilities.json
            pip-audit-sbom.json
            safety-vulnerabilities.json

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.11

      - name: Install license checking tools
        run: |
          uv add --dev pip-licenses licensecheck

      - name: Install project dependencies
        run: uv sync --dev

      - name: Generate license report
        run: |
          uv run pip-licenses --format=json --output-file=licenses.json
          uv run pip-licenses --format=plain-vertical --output-file=licenses.txt

      - name: Check for problematic licenses
        run: |
          uv run python -c "
          import json

          # Define problematic licenses
          problematic_licenses = {
              'GPL-3.0', 'GPL-2.0', 'AGPL-3.0', 'AGPL-1.0',
              'CPAL-1.0', 'OSL-3.0', 'EPL-1.0', 'EPL-2.0',
              'EUPL-1.1', 'EUPL-1.2'
          }

          # Load license data
          with open('licenses.json', 'r') as f:
              licenses = json.load(f)

          issues = []
          for pkg in licenses:
              license_name = pkg.get('License', '').strip()
              if license_name in problematic_licenses:
                  issues.append(f'{pkg[\"Name\"]} ({pkg[\"Version\"]}): {license_name}')

          if issues:
              print('⚠️ Potentially problematic licenses found:')
              for issue in issues:
                  print(f'  - {issue}')
              with open('license-issues.txt', 'w') as f:
                  f.write('\\n'.join(issues))
          else:
              print('✅ No problematic licenses detected')
              with open('license-issues.txt', 'w') as f:
                  f.write('No issues found')
          "

      - name: Upload license reports
        uses: actions/upload-artifact@v4.6.2
        with:
          name: license-reports
          path: |
            licenses.json
            licenses.txt
            license-issues.txt

  compatibility-test:
    name: Python Version Compatibility
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true
          python-version: ${{ matrix.python-version }}

      - name: Install project dependencies
        run: uv sync

      - name: Test basic import capabilities
        run: |
          uv run python -c "
          import sys
          print(f'Python {sys.version}')

          # Test critical imports
          try:
              import pandas
              import numpy
              import requests
              import sqlite3
              print('✅ Core dependencies import successfully')
          except ImportError as e:
              print(f'❌ Import error: {e}')
              sys.exit(1)
          "

      - name: Check for deprecation warnings
        run: |
          uv run python -W error::DeprecationWarning -c "
          import warnings
          warnings.simplefilter('error', DeprecationWarning)

          try:
              import pandas
              import numpy
              import requests
              print('✅ No deprecation warnings with Python ${{ matrix.python-version }}')
          except DeprecationWarning as e:
              print(f'⚠️ Deprecation warning: {e}')
          except Exception as e:
              print(f'Other issue: {e}')
          " || true

  dependency-update-check:
    name: Check for Available Updates
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.11

      - name: Install tools
        run: |
          uv add --dev pur

      - name: Check for outdated dependencies
        run: |
          uv sync --dev

          echo "## Outdated Dependencies Report" > update-report.md
          echo "Generated on: $(date)" >> update-report.md
          echo "" >> update-report.md

          uv run pip list --outdated --format=columns >> update-report.md || true

      - name: Create issue for updates if needed
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('update-report.md', 'utf8');

            if (report.includes('Package') && report.includes('Version')) {
              const issueTitle = 'Dependency Update Check - ' + new Date().toISOString().split('T')[0];
              const issueBody = report + '\n\n## Recommendations\n- Review the outdated packages above\n- Test updates in a separate branch\n- Update dependencies in batches to isolate issues\n- Run full test suite after updates\n\n*This issue was automatically created by the dependency check workflow.*';

              const { data: existingIssues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'dependencies'
              });

              const hasExistingUpdate = existingIssues.some(issue =>
                issue.title.includes('Dependency Update Check')
              );

              if (!hasExistingUpdate) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: ['dependencies', 'maintenance']
                });
              }
            }

      - name: Upload update report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dependency-update-report
          path: update-report.md

  security-advisory-check:
    name: Security Advisory Monitor
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies and tools
        run: |
          uv sync
          uv add --dev bandit

      - name: Run local security analysis
        run: |
          echo "## Local Security Analysis Results" > security-advisory.md
          echo "Generated on: $(date)" >> security-advisory.md
          echo "" >> security-advisory.md

          # Run bandit for local security analysis
          echo "### Bandit Security Analysis:" >> security-advisory.md
          uv run bandit -r . --exclude "./venv/*,./tests/*" -f txt >> security-advisory.md 2>&1 || true

          echo "" >> security-advisory.md
          echo "### Package Versions:" >> security-advisory.md
          uv run pip list >> security-advisory.md

      - name: Upload security advisory report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: security-advisory-report
          path: security-advisory.md

  summary:
    name: Dependency Check Summary
    runs-on: ubuntu-latest
    needs: [dependency-audit, license-check, compatibility-test]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate summary report
        run: |
          echo "# Dependency Security Check Summary" > summary.md
          echo "Generated on: $(date)" >> summary.md
          echo "" >> summary.md

          # Check job results
          echo "## Job Results:" >> summary.md
          echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> summary.md
          echo "- License Check: ${{ needs.license-check.result }}" >> summary.md
          echo "- Compatibility Test: ${{ needs.compatibility-test.result }}" >> summary.md
          echo "" >> summary.md

          echo "## Artifacts Generated:" >> summary.md
          ls -la */
          echo "" >> summary.md

          # Add recommendations
          echo "## Recommendations:" >> summary.md
          echo "- Review security audit reports for vulnerabilities" >> summary.md
          echo "- Check license compliance for any issues" >> summary.md
          echo "- Monitor compatibility across Python versions" >> summary.md
          echo "- Keep dependencies updated regularly" >> summary.md

      - name: Upload summary report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dependency-check-summary
          path: summary.md
