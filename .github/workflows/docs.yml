name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'utils/**'
      - 'china_data_*.py'
      - 'config.py'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'utils/**'
      - 'china_data_*.py'
      - 'config.py'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  # Build documentation
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install UV
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Configure Git for mkdocs
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Build documentation
      run: |
        uv run mkdocs build --strict --verbose

    - name: Test documentation
      run: |
        # Test that all internal links work
        uv run python -c "
        import os
        import re
        from pathlib import Path

        def check_internal_links():
            site_dir = Path('site')
            if not site_dir.exists():
                print('Site directory not found')
                return False

            html_files = list(site_dir.rglob('*.html'))
            print(f'Checking {len(html_files)} HTML files...')

            for html_file in html_files:
                content = html_file.read_text(encoding='utf-8')
                # Check for broken internal links (basic check)
                if '404.html' in content and 'error' in content.lower():
                    print(f'Potential 404 error in {html_file}')
                    return False

            print('Documentation build validation passed')
            return True

        if not check_internal_links():
            exit(1)
        "

    - name: Upload documentation artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./site

  # Test documentation with doctests
  test-doctests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Run doctests
      run: |
        # Run doctests on documentation files
        uv run pytest --doctest-modules --doctest-glob='*.md' docs/ -v || true

        # Run doctests on Python modules
        uv run pytest --doctest-modules utils/ china_data_*.py config.py -v

  # Deploy to GitHub Pages (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, test-doctests]
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Validate documentation structure
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Validate documentation structure
      run: |
        echo "Validating documentation structure..."

        # Check required files exist
        required_files=(
          "docs/index.md"
          "mkdocs.yml"
          "docs/api/core.md"
          "docs/adrs/index.md"
        )

        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required file missing: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done

        # Check mkdocs.yml syntax
        uv run python -c "
        import yaml
        try:
            with open('mkdocs.yml', 'r') as f:
                yaml.safe_load(f)
            print('✅ mkdocs.yml syntax is valid')
        except yaml.YAMLError as e:
            print(f'❌ mkdocs.yml syntax error: {e}')
            exit(1)
        "

        # Check for broken markdown links (basic check)
        echo "Checking for obvious markdown issues..."
        find docs/ -name "*.md" -exec grep -l "\[\](" {} \; | while read file; do
          echo "⚠️  Empty link found in: $file"
        done

        echo "Documentation structure validation completed"

  # Check documentation coverage
  coverage:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Check docstring coverage
      run: |
        echo "Checking docstring coverage..."
        uv run interrogate --config pyproject.toml --verbose

        echo "Generating docstring coverage report..."
        uv run interrogate --config pyproject.toml --generate-badge docs/coverage.svg || true

    - name: Upload coverage badge
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: docstring-coverage-badge
        path: docs/coverage.svg
        retention-days: 30
