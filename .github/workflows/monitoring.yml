name: Repository Monitoring

on:
  schedule:
    - cron: '0 8 * * 1' # Weekly on Monday at 8 AM
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: read

jobs:
  repository-health:
    name: Repository Health Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for analysis

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --dev

      - name: Analyze repository metrics
        run: |
          echo "# Repository Health Report" > health-report.md
          echo "Generated on: $(date)" >> health-report.md
          echo "" >> health-report.md

          # Git statistics
          echo "## Git Statistics" >> health-report.md
          echo "- Total commits: $(git rev-list --all --count)" >> health-report.md
          echo "- Contributors: $(git shortlog -sn | wc -l)" >> health-report.md
          echo "- Branches: $(git branch -a | wc -l)" >> health-report.md
          echo "- Tags: $(git tag | wc -l)" >> health-report.md
          echo "" >> health-report.md

          # Code metrics
          echo "## Code Metrics" >> health-report.md
          find . -name "*.py" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./.git/*" | xargs wc -l | tail -1 >> health-report.md
          echo "" >> health-report.md

          # Test coverage
          echo "## Test Coverage" >> health-report.md
          uv run pytest --cov --cov-report=term-missing > coverage.txt 2>&1 || true
          grep "TOTAL" coverage.txt >> health-report.md || echo "Coverage data not available" >> health-report.md
          echo "" >> health-report.md

          # Security analysis summary
          echo "## Security Status" >> health-report.md
          uv run bandit -r . --format=txt --exclude="./venv/*,./.venv/*,./env/*,./ENV/*,./venv*/*,./tests/*,./test/*,./node_modules/*,./htmlcov/*,./workflow_outputs/*,./build/*,./dist/*,./target/*,./.mypy_cache/*,./.pytest_cache/*,./.ruff_cache/*,./.hypothesis/*,./.vscode/*,./.idea/*,./docs/_build/*,./site/*,./tmp/*,./temp/*,./output/*,*.egg-info/*" > security.txt 2>&1 || true
          if grep -q "No issues identified" security.txt; then
            echo "✅ No security issues detected" >> health-report.md
          else
            echo "⚠️ Security issues detected - see detailed report" >> health-report.md
          fi
          echo "" >> health-report.md

          # Dependencies analysis
          echo "## Dependencies" >> health-report.md
          echo "- Total dependencies: $(uv pip list | wc -l)" >> health-report.md
          uv run pip list --outdated --format=columns > outdated.txt 2>/dev/null || true
          if [ -s outdated.txt ]; then
            echo "- Outdated packages: $(tail -n +3 outdated.txt | wc -l)" >> health-report.md
          else
            echo "- All packages up to date" >> health-report.md
          fi

      - name: Check for stale PRs and issues
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Get stale PRs (open for more than 30 days)
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

            const stalePRs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'asc'
            });

            const oldPRs = stalePRs.data.filter(pr =>
              new Date(pr.created_at) < thirtyDaysAgo
            );

            // Get stale issues (open for more than 60 days)
            const sixtyDaysAgo = new Date();
            sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);

            const staleIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'asc'
            });

            const oldIssues = staleIssues.data.filter(issue =>
              !issue.pull_request && new Date(issue.created_at) < sixtyDaysAgo
            );

            let report = fs.readFileSync('health-report.md', 'utf8');
            report += '\n## Maintenance Items\n';
            report += `- Stale PRs (>30 days): ${oldPRs.length}\n`;
            report += `- Stale Issues (>60 days): ${oldIssues.length}\n\n`;

            if (oldPRs.length > 0) {
              report += '### Stale Pull Requests\n';
              oldPRs.forEach(pr => {
                report += `- [#${pr.number}](${pr.html_url}) - ${pr.title}\n`;
              });
              report += '\n';
            }

            if (oldIssues.length > 0) {
              report += '### Stale Issues\n';
              oldIssues.forEach(issue => {
                report += `- [#${issue.number}](${issue.html_url}) - ${issue.title}\n`;
              });
              report += '\n';
            }

            fs.writeFileSync('health-report.md', report);

      - name: Performance metrics
        run: |
          echo "## Performance Metrics" >> health-report.md

          # Repository size
          repo_size=$(du -sh . | cut -f1)
          echo "- Repository size: $repo_size" >> health-report.md

          # Test execution time
          start_time=$(date +%s)
          uv run pytest tests/ --tb=no -q > /dev/null 2>&1 || true
          end_time=$(date +%s)
          test_duration=$((end_time - start_time))
          echo "- Test suite duration: ${test_duration}s" >> health-report.md

          # Build time
          start_time=$(date +%s)
          uv run python -c "import utils; print('Import successful')" > /dev/null 2>&1 || true
          end_time=$(date +%s)
          import_duration=$((end_time - start_time))
          echo "- Import time: ${import_duration}s" >> health-report.md

      - name: Create monitoring issue if needed
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('health-report.md', 'utf8');

            // Check if we need to create an issue
            const hasIssues = report.includes('⚠️') ||
                            report.includes('Stale PRs (>30 days): ') && !report.includes('Stale PRs (>30 days): 0') ||
                            report.includes('Stale Issues (>60 days): ') && !report.includes('Stale Issues (>60 days): 0');

            if (hasIssues) {
              const issueTitle = `Repository Health Check - ${new Date().toISOString().split('T')[0]}`;
              const issueBody = report + '\n\n---\n*This issue was automatically created by the monitoring workflow.*';

              // Check if a similar issue already exists
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'monitoring'
              });

              const hasExistingMonitoring = existingIssues.data.some(issue =>
                issue.title.includes('Repository Health Check')
              );

              if (!hasExistingMonitoring) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: ['monitoring', 'maintenance']
                });
              }
            }

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: repository-health-report
          path: health-report.md
          retention-days: 30
