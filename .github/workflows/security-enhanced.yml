name: Enhanced Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write

concurrency:
  group: security-enhanced-${{ github.ref }}
  cancel-in-progress: false

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev


      - name: Run Semgrep SAST
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/bandit
            p/owasp-top-ten
            p/cwe-top-25
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Run Ruff Security Checks
        run: |
          uv run ruff check . --select=S,B --output-format=json > ruff-security-report.json || true
          uv run ruff check . --select=S,B --output-format=github

      - name: Run Bandit Security Scan
        run: |
          uv add --dev bandit==1.7.0
          uv run bandit -r . -f json -o bandit-report.json --exclude "./venv/*,./tests/*,./.venv/*" || true
          uv run bandit -r . -f txt --exclude "./venv/*,./tests/*,./.venv/*" || true

      - name: Upload SAST Reports
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: sast-reports
          path: |
            ruff-security-report.json
            bandit-report.json

  dependency-security:
    name: Dependency Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run pip-audit vulnerability scan
        run: |
          uv add --dev pip-audit==2.7.3
          uv run pip-audit --format=json --output=pip-audit-vulnerabilities.json || true
          uv run pip-audit --format=cyclonedx-json --output=pip-audit-sbom.json || true
          uv run pip-audit || true

      - name: Run Safety vulnerability scan
        run: |
          uv run safety check --json --output=safety-vulnerabilities.json || true
          uv run safety check || true

      - name: Generate dependency tree
        run: |
          uv run pipdeptree --json > dependency-tree.json
          uv run pipdeptree --graph-output png > dependency-graph.png || true

      - name: Upload dependency security reports
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: dependency-security-reports
          path: |
            pip-audit-vulnerabilities.json
            pip-audit-sbom.json
            safety-vulnerabilities.json
            dependency-tree.json
            dependency-graph.png

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Generate license report
        run: |
          uv run pip-licenses --format=json --output-file=licenses.json
          uv run pip-licenses --format=csv --output-file=licenses.csv
          uv run pip-licenses --format=html --output-file=licenses.html

      - name: Check for problematic licenses
        run: |
          # Check for GPL licenses that might conflict with MIT
          if uv run pip-licenses --format=json | grep -i "gpl\|agpl\|copyleft"; then
            echo "⚠️ Warning: Found potentially problematic licenses"
            uv run pip-licenses --format=json | grep -i "gpl\|agpl\|copyleft" || true
          else
            echo "✅ No problematic licenses found"
          fi

      - name: Upload license reports
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: license-reports
          path: |
            licenses.json
            licenses.csv
            licenses.html

  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Install detect-secrets
        run: |
          source $HOME/.cargo/env
          uv pip install "detect-secrets==1.5.0"
      - name: Run detect-secrets scan
        run: |
          # Update baseline if it doesn't exist
          if [ ! -f .secrets.baseline ]; then
            echo "Creating initial baseline..."
            uv run detect-secrets scan --all-files \
              --exclude-files '\.mypy_cache/.*' \
              --exclude-files '\.venv/.*' \
              --exclude-files 'venv/.*' \
              --exclude-files '\.git/.*' \
              --exclude-files '__pycache__/.*' \
              --exclude-files '\.pytest_cache/.*' \
              --exclude-files '\.ruff_cache/.*' \
              --exclude-files '\.hypothesis/.*' \
              --exclude-files 'node_modules/.*' \
              --exclude-files 'htmlcov/.*' \
              --exclude-files 'workflow_outputs/.*' \
              --exclude-files 'uv\.lock' \
              --exclude-files 'coverage\.xml' \
              --baseline .secrets.baseline
          fi

          # Create a new scan and compare with baseline
          echo "Scanning for secrets..."
          uv run detect-secrets scan --all-files \
            --exclude-files '\.mypy_cache/.*' \
            --exclude-files '\.venv/.*' \
            --exclude-files 'venv/.*' \
            --exclude-files '\.git/.*' \
            --exclude-files '__pycache__/.*' \
            --exclude-files '\.pytest_cache/.*' \
            --exclude-files '\.ruff_cache/.*' \
            --exclude-files '\.hypothesis/.*' \
            --exclude-files 'node_modules/.*' \
            --exclude-files 'htmlcov/.*' \
            --exclude-files 'workflow_outputs/.*' \
            --exclude-files 'uv\.lock' \
            --exclude-files 'coverage\.xml' \
            > current-scan.json

          # Check if there are differences between baseline and current scan
          # Extract just the secrets (excluding metadata) for comparison
          if command -v jq >/dev/null 2>&1; then
            # Use jq if available for more precise comparison
            baseline_secrets=$(jq -r '.results | keys[]' .secrets.baseline 2>/dev/null | sort || echo "")
            current_secrets=$(jq -r '.results | keys[]' current-scan.json 2>/dev/null | sort || echo "")

            if [ "$baseline_secrets" != "$current_secrets" ]; then
              echo "❌ New secrets detected!"
              echo "Baseline files: $(echo "$baseline_secrets" | wc -l)"
              echo "Current files: $(echo "$current_secrets" | wc -l)"
              echo ""
              echo "🔍 Files with new secrets:"
              comm -13 <(echo "$baseline_secrets") <(echo "$current_secrets") | head -10
              echo ""
              echo "📋 Next steps:"
              echo "1. Review the detected secrets above"
              echo "2. If they are false positives, add them to .secrets.baseline:"
              echo "   uv run detect-secrets scan --baseline .secrets.baseline"
              echo "3. If they are real secrets, remove them and rotate any exposed credentials"
              echo "4. Use 'uv run detect-secrets audit .secrets.baseline' to review and label secrets"
              rm -f current-scan.json
              exit 1
            fi
          else
            # Fallback: simple file size comparison
            baseline_size=$(wc -c < .secrets.baseline)
            current_size=$(wc -c < current-scan.json)

            # Allow for small differences in metadata (timestamps, etc.)
            size_diff=$((current_size - baseline_size))
            if [ $size_diff -gt 1000 ] || [ $size_diff -lt -1000 ]; then
              echo "❌ Significant changes detected in secrets scan!"
              echo "Baseline size: $baseline_size bytes"
              echo "Current size: $current_size bytes"
              echo ""
              echo "📋 Next steps:"
              echo "1. Install jq for better analysis: apt-get install jq"
              echo "2. Review the secrets manually"
              echo "3. Update your baseline if changes are legitimate"
              rm -f current-scan.json
              exit 1
            fi
          fi

          echo "✅ No new secrets detected."
          rm -f current-scan.json

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Build Docker image
        run: |
          docker build -t china-data-security-test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'china-data-security-test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'  # Don't fail the build on vulnerabilities

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-results.json'
          exit-code: '0'  # Don't fail the build on vulnerabilities

      - name: Upload container security reports
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: container-security-reports
          path: |
            trivy-results.sarif
            trivy-fs-results.json

  security-summary:
    name: Security Summary
    needs: [sast-analysis, dependency-security, license-compliance, secrets-detection]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## 📊 Scan Results" >> security-summary.md
          echo "" >> security-summary.md

          # SAST Results
          echo "### Static Application Security Testing (SAST)" >> security-summary.md
          if [ -f "ruff-security-report.json" ]; then
            RUFF_ISSUES=$(jq length ruff-security-report.json 2>/dev/null || echo "0")
            echo "- Ruff Security Issues: $RUFF_ISSUES" >> security-summary.md
          fi

          if [ -f "bandit-report.json" ]; then
            BANDIT_ISSUES=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
            echo "- Bandit Security Issues: $BANDIT_ISSUES" >> security-summary.md
          fi
          echo "" >> security-summary.md

          # Dependency Security
          echo "### Dependency Security" >> security-summary.md
          if [ -f "pip-audit-vulnerabilities.json" ]; then
            PIP_AUDIT_VULNS=$(jq '.vulnerabilities | length' pip-audit-vulnerabilities.json 2>/dev/null || echo "0")
            echo "- pip-audit Vulnerabilities: $PIP_AUDIT_VULNS" >> security-summary.md
          fi

          if [ -f "safety-vulnerabilities.json" ]; then
            SAFETY_VULNS=$(jq '.vulnerabilities | length' safety-vulnerabilities.json 2>/dev/null || echo "0")
            echo "- Safety Vulnerabilities: $SAFETY_VULNS" >> security-summary.md
          fi
          echo "" >> security-summary.md

          # License Compliance
          echo "### License Compliance" >> security-summary.md
          if [ -f "licenses.json" ]; then
            TOTAL_DEPS=$(jq length licenses.json 2>/dev/null || echo "0")
            echo "- Total Dependencies: $TOTAL_DEPS" >> security-summary.md
            echo "- License Report: ✅ Generated" >> security-summary.md
          fi
          echo "" >> security-summary.md

          echo "## 🎯 Recommendations" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. Review all identified security issues" >> security-summary.md
          echo "2. Update vulnerable dependencies" >> security-summary.md
          echo "3. Verify license compatibility" >> security-summary.md
          echo "4. Address any secrets detection findings" >> security-summary.md
          echo "" >> security-summary.md
          echo "Generated on: $(date -u)" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4.6.2
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-summary.md')) {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
