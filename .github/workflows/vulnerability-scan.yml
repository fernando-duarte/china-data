name: Vulnerability Scan

on:
  pull_request:
    branches: [ main, master ]
    paths:
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/vulnerability-scan.yml'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  vulnerability-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
          key: ${{ runner.os }}-python-3.11-vuln-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-3.11-vuln-
            ${{ runner.os }}-python-

      - name: Install uv for faster dependency resolution
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Install dependencies with uv
        run: |
          uv venv venv
          source venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run pip-audit vulnerability scan
        run: |
          source venv/bin/activate
          pip-audit --format=json --output=pip-audit-vulnerabilities.json
          pip-audit --format=cyclonedx-json --output=pip-audit-sbom.json
          pip-audit --format=sarif --output=pip-audit-sarif.json
        continue-on-error: true

      - name: Run safety vulnerability scan
        run: |
          source venv/bin/activate
          safety check --json --output safety-vulnerabilities.json
        continue-on-error: true

      - name: Generate vulnerability summary
        run: |
          source venv/bin/activate
          python -c "
          import json
          import os
          from datetime import datetime

          # Initialize summary
          summary = {
              'scan_date': datetime.now().isoformat(),
              'pip_audit': {'vulnerabilities': 0, 'packages_scanned': 0},
              'safety': {'vulnerabilities': 0, 'packages_scanned': 0},
              'critical_issues': [],
              'recommendations': []
          }

          # Process pip-audit results
          try:
              with open('pip-audit-vulnerabilities.json', 'r') as f:
                  pip_audit_data = json.load(f)
                  if 'vulnerabilities' in pip_audit_data:
                      summary['pip_audit']['vulnerabilities'] = len(pip_audit_data['vulnerabilities'])
                      for vuln in pip_audit_data['vulnerabilities']:
                          if vuln.get('fix_versions'):
                              summary['critical_issues'].append({
                                  'package': vuln['package'],
                                  'version': vuln['version'],
                                  'vulnerability': vuln['id'],
                                  'severity': vuln.get('severity', 'unknown'),
                                  'fix_available': bool(vuln.get('fix_versions'))
                              })
          except (FileNotFoundError, json.JSONDecodeError):
              pass

          # Process safety results
          try:
              with open('safety-vulnerabilities.json', 'r') as f:
                  safety_data = json.load(f)
                  if isinstance(safety_data, list):
                      summary['safety']['vulnerabilities'] = len(safety_data)
                      for vuln in safety_data:
                          summary['critical_issues'].append({
                              'package': vuln.get('package_name', 'unknown'),
                              'version': vuln.get('analyzed_version', 'unknown'),
                              'vulnerability': vuln.get('vulnerability_id', 'unknown'),
                              'severity': vuln.get('severity', 'unknown'),
                              'fix_available': bool(vuln.get('more_info_url'))
                          })
          except (FileNotFoundError, json.JSONDecodeError):
              pass

          # Generate recommendations
          if summary['pip_audit']['vulnerabilities'] > 0 or summary['safety']['vulnerabilities'] > 0:
              summary['recommendations'].extend([
                  'Review and update vulnerable packages immediately',
                  'Test updates in a development environment first',
                  'Consider pinning to specific secure versions',
                  'Monitor security advisories for dependencies'
              ])
          else:
              summary['recommendations'].append('No vulnerabilities detected - maintain current update schedule')

          # Save summary
          with open('vulnerability-summary.json', 'w') as f:
              json.dump(summary, f, indent=2)

          # Create markdown report
          with open('vulnerability-report.md', 'w') as f:
              f.write('# Vulnerability Scan Report\\n\\n')
              f.write(f'**Scan Date:** {summary[\"scan_date\"]}\\n\\n')
              f.write(f'## Summary\\n\\n')
              f.write(f'- **pip-audit vulnerabilities:** {summary[\"pip_audit\"][\"vulnerabilities\"]}\\n')
              f.write(f'- **safety vulnerabilities:** {summary[\"safety\"][\"vulnerabilities\"]}\\n')
              f.write(f'- **Total critical issues:** {len(summary[\"critical_issues\"])}\\n\\n')

              if summary['critical_issues']:
                  f.write('## Critical Issues\\n\\n')
                  for issue in summary['critical_issues']:
                      f.write(f'- **{issue[\"package\"]}** ({issue[\"version\"]}): {issue[\"vulnerability\"]} - Severity: {issue[\"severity\"]}\\n')
                  f.write('\\n')

              f.write('## Recommendations\\n\\n')
              for rec in summary['recommendations']:
                  f.write(f'- {rec}\\n')

          print(f'Vulnerability scan completed. Found {len(summary[\"critical_issues\"])} critical issues.')
          "

      - name: Upload SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: pip-audit-sarif.json
        continue-on-error: true

      - name: Upload vulnerability scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-scan-results
          path: |
            pip-audit-vulnerabilities.json
            pip-audit-sbom.json
            pip-audit-sarif.json
            safety-vulnerabilities.json
            vulnerability-summary.json
            vulnerability-report.md

      - name: Create issue for critical vulnerabilities
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const summary = JSON.parse(fs.readFileSync('vulnerability-summary.json', 'utf8'));
              const report = fs.readFileSync('vulnerability-report.md', 'utf8');

              if (summary.critical_issues.length > 0) {
                const { data: existingIssues } = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  labels: 'security,vulnerability'
                });

                const hasExistingVuln = existingIssues.some(issue =>
                  issue.title.includes('Security Vulnerabilities Detected')
                );

                if (!hasExistingVuln) {
                  const issueTitle = `🚨 Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`;
                  const issueBody = `${report}

            ## Automated Actions Required

            1. **Immediate Review**: Assess the severity and impact of each vulnerability
            2. **Update Dependencies**: Upgrade affected packages to secure versions
            3. **Test Changes**: Run full test suite after updates
            4. **Deploy Fixes**: Apply security patches as soon as possible

            ## Additional Resources

            - [pip-audit documentation](https://pypi.org/project/pip-audit/)
            - [Python Security Advisory Database](https://github.com/pypa/advisory-database)
            - [NIST National Vulnerability Database](https://nvd.nist.gov/)

            *This issue was automatically created by the vulnerability scan workflow.*`;

                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: issueTitle,
                    body: issueBody,
                    labels: ['security', 'vulnerability', 'high-priority']
                  });
                }
              }
            } catch (error) {
              console.log('Error processing vulnerability results:', error);
            }

      - name: Comment on PR with vulnerability status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const summary = JSON.parse(fs.readFileSync('vulnerability-summary.json', 'utf8'));

              let comment = `## 🔒 Vulnerability Scan Results\n\n`;
              comment += `- **pip-audit vulnerabilities:** ${summary.pip_audit.vulnerabilities}\n`;
              comment += `- **safety vulnerabilities:** ${summary.safety.vulnerabilities}\n`;
              comment += `- **Total critical issues:** ${summary.critical_issues.length}\n\n`;

              if (summary.critical_issues.length > 0) {
                comment += `⚠️ **Security vulnerabilities detected!** Please review and address before merging.\n\n`;
                comment += `### Critical Issues:\n`;
                for (const issue of summary.critical_issues.slice(0, 5)) {
                  comment += `- **${issue.package}** (${issue.version}): ${issue.vulnerability}\n`;
                }
                if (summary.critical_issues.length > 5) {
                  comment += `- ... and ${summary.critical_issues.length - 5} more\n`;
                }
              } else {
                comment += `✅ **No vulnerabilities detected** - Safe to proceed!\n`;
              }

              comment += `\n*Scan completed at ${summary.scan_date}*`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Error posting PR comment:', error);
            }
