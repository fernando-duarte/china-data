[build-system]
requires = ["setuptools>=67.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["utils*", "china_data*"]
exclude = ["tests*", "input*", "output*", "node_modules*", "parameters_info*", "workflow_outputs*"]

[project]
name = "china-data"
requires-python = ">=3.10"
description = "China Economic Data Analysis Pipeline"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Fernando Duarte", email = "fernando_duarte@brown.edu"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",

    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
dynamic = ["version"]
dependencies = [
    "jinja2>=3.1.6,<4.0",
    "numpy>=1.26.4,<2.0",
    "openpyxl>=3.1.2,<4.0",
    "pandas>=2.2.3,<3.0",
    "pandas-datareader>=0.10.0,<1.0",
    "requests>=2.31.0,<3.0",
    "requests-cache>=1.0.0,<2.0",
    "scikit-learn>=1.3.2,<2.0",
    "statsmodels>=0.14.4,<1.0",
    "structlog>=25.1.0,<26.0",
]

[project.optional-dependencies]
dev = [
    # Existing tools...
    "bandit>=1.7,<2.0",
    "black>=25.1,<26.0",
    "ruff>=0.8,<1.0",  # Latest Ruff
    "uv>=0.5,<1.0",    # UV package manager
    "interrogate>=1.7,<2.0",
    "ipython>=8.29,<9.0",
    "jupyter>=1.1,<2.0",
    "memory-profiler>=0.61,<1.0",
    "mkdocs>=1.6,<2.0",
    "mkdocs-material>=9.5,<10.0",
    "mkdocs-mermaid2-plugin>=1.1,<2.0",
    "mkdocstrings[python]>=0.26,<1.0",
    "mkdocs-jupyter>=0.25,<1.0",  # Jupyter notebook integration
    "mkdocs-gallery>=0.10,<1.0",  # Code example gallery
    "mkdocs-git-revision-date-localized-plugin>=1.3,<2.0",  # Git-based dates
    "mypy>=1.15,<2.0",
    "pandas-stubs>=2.2,<3.0",
    "pip-audit>=2.7,<3.0",
    "pip-licenses>=5.0,<6.0",
    "pipdeptree>=2.23,<3.0",
    "pre-commit>=3.0,<4.0",
    "psutil>=6.1,<7.0",
    "py-spy>=0.3,<1.0",
    "pylint>=3.3,<4.0",
    "pytest>=8.2,<9.0",
    "pytest-benchmark>=4.0,<5.0",
    "pytest-cov>=4.1,<5.0",
    "pytest-doctestplus>=1.2,<2.0",
    "pytest-factoryboy>=2.5,<3.0",
    "pytest-xdist>=3.6,<4.0",
    "hypothesis>=6.100,<7.0",
    "mutmut>=2.4,<3.0",
    "factory-boy>=3.3,<4.0",
    "radon>=6.0,<7.0",
    "safety>=3.0,<4.0",
    "semgrep>=1.0,<2.0",
    "types-pytz>=2025.2,<2026.0",
    "types-requests>=2.32,<3.0",

    # 2025 additions
    "syrupy>=4.0,<5.0",           # Snapshot testing
    "pytest-asyncio>=0.24,<1.0",  # Async testing
    "pytest-mock>=3.14,<4.0",     # Enhanced mocking
    "pytest-clarity>=1.0,<2.0",   # Better test output
    "pytest-sugar>=1.0,<2.0",     # Pretty test output
    "rich>=13.0,<14.0",           # Rich terminal output
]

# Production extras for different use cases
api = [
    "fastapi>=0.115,<1.0",
    "uvicorn>=0.32,<1.0",
    "pydantic>=2.10,<3.0",
]

monitoring = [
    "opentelemetry-api>=1.28,<2.0",
    "opentelemetry-sdk>=1.28,<2.0",
    "prometheus-client>=0.21,<1.0",
]

[tool.uv]
# UV configuration for faster dependency resolution
dev-dependencies = [
    # Existing tools...
    "bandit>=1.7,<2.0",
    "black>=25.1,<26.0",
    "ruff>=0.8,<1.0",  # Latest Ruff
    "uv>=0.5,<1.0",    # UV package manager
    "interrogate>=1.7,<2.0",
    "ipython>=8.29,<9.0",
    "jupyter>=1.1,<2.0",
    "memory-profiler>=0.61,<1.0",
    "mkdocs>=1.6,<2.0",
    "mkdocs-material>=9.5,<10.0",
    "mkdocs-mermaid2-plugin>=1.1,<2.0",
    "mkdocstrings[python]>=0.26,<1.0",
    "mkdocs-jupyter>=0.25,<1.0",  # Jupyter notebook integration
    "mkdocs-gallery>=0.10,<1.0",  # Code example gallery
    "mkdocs-git-revision-date-localized-plugin>=1.3,<2.0",  # Git-based dates
    "mypy>=1.15,<2.0",
    "pandas-stubs>=2.2,<3.0",
    "pip-audit>=2.7,<3.0",
    "pip-licenses>=5.0,<6.0",
    "pipdeptree>=2.23,<3.0",
    "pre-commit>=3.0,<4.0",
    "psutil>=6.1,<7.0",
    "py-spy>=0.3,<1.0",
    "pylint>=3.3,<4.0",
    "pytest>=8.2,<9.0",
    "pytest-benchmark>=4.0,<5.0",
    "pytest-cov>=4.1,<5.0",
    "pytest-doctestplus>=1.2,<2.0",
    "pytest-factoryboy>=2.5,<3.0",
    "pytest-xdist>=3.6,<4.0",
    "hypothesis>=6.100,<7.0",
    "mutmut>=2.4,<3.0",
    "factory-boy>=3.3,<4.0",
    "radon>=6.0,<7.0",
    "safety>=3.0,<4.0",
    "semgrep>=1.0,<2.0",
    "types-pytz>=2025.2,<2026.0",
    "types-requests>=2.32,<3.0",

    # 2025 additions
    "syrupy>=4.0,<5.0",           # Snapshot testing
    "pytest-asyncio>=0.24,<1.0",  # Async testing
    "pytest-mock>=3.14,<4.0",     # Enhanced mocking
    "pytest-clarity>=1.0,<2.0",   # Better test output
    "pytest-sugar>=1.0,<2.0",     # Pretty test output
    "rich>=13.0,<14.0",           # Rich terminal output
]

# UV workspace configuration
[tool.uv.workspace]
members = ["."]

# UV pip configuration
[tool.uv.pip]
# Use faster index strategy
index-strategy = "unsafe-best-match"

[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.nox
  | \.venv
  | \.env
  | venv
  | ENV
  | \.ruff_cache
  | \.pytest_cache
  | \.hypothesis
  | __pycache__
  | __pypackages__
  | \.pdm-python
  | \.uv-cache
  | \.devcontainer
  | \.vscode
  | \.idea
  | \.ipynb_checkpoints
  | _build
  | buck-out
  | build
  | dist
  | htmlcov
  | cover
  | migrations
  | static
  | media
  | node_modules
  | workflow_outputs
  | parameters_info
  | input
  | output
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = [
    "venv",
    ".venv",
    ".env",
    "ENV",
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".tox",
    ".nox",
    ".hypothesis",
    "__pypackages__",
    ".pdm-python",
    ".uv-cache",
    ".devcontainer",
    ".vscode",
    ".idea",
    ".ipynb_checkpoints",
    "build",
    "dist",
    "htmlcov",
    "cover",
    "migrations",
    "static",
    "media",
    "node_modules",
    "workflow_outputs",
    "parameters_info",
    "input",
    "output",
]

[tool.pylint.main]
py-version = "3.10"

# Modern ignore-paths with regex patterns (2024-2025 best practice)
ignore-paths = [
    # Traditional cache and build directories
    "^.*/__pycache__/.*$",
    "^.*/\\.git/.*$",
    "^.*/build/.*$",
    "^.*/dist/.*$",

    # Virtual environments (all variants)
    "^.*/\\.?venv/.*$",
    "^.*/\\.?env/.*$",
    "^.*/ENV/.*$",

    # Modern cache directories (2024-2025)
    "^.*/\\.ruff_cache/.*$",
    "^.*/\\.mypy_cache/.*$",
    "^.*/\\.pytest_cache/.*$",
    "^.*/\\.tox/.*$",
    "^.*/\\.nox/.*$",
    "^.*/\\.hypothesis/.*$",

    # Package managers and build artifacts
    "^.*\\.egg-info/.*$",
    "^.*/__pypackages__/.*$",
    "^.*/\\.pdm-python/.*$",
    "^.*/\\.uv-cache/.*$",

    # Development tools and IDEs
    "^.*/\\.ipynb_checkpoints/.*$",
    "^.*/\\.devcontainer/.*$",
    "^.*/\\.vscode/.*$",
    "^.*/\\.idea/.*$",

    # Coverage and testing
    "^.*/htmlcov/.*$",
    "^.*/\\.coverage.*$",
    "^.*/cover/.*$",

    # Framework-specific
    "^.*/migrations/.*$",
    "^.*/static/.*$",
    "^.*/media/.*$",
    "^.*/node_modules/.*$",

    # Project-specific directories
    "^.*/workflow_outputs/.*$",
    "^.*/parameters_info/.*$",
    "^.*/input/.*$",
    "^.*/output/.*$",
]

# Keep traditional ignore patterns for compatibility
ignore = ["CVS"]
ignore-patterns = ["^\\.#"]

# Performance optimizations
jobs = 0  # Use all available CPU cores for parallel processing
persistent = true  # Enable persistent caching for faster subsequent runs
limit-inference-results = 50  # Reduce inference depth for better performance

# Cache optimization
clear-cache-post-run = false  # Keep cache between runs for better performance

[tool.pylint.format]
max-line-length = 120

[tool.pylint.design]
max-args = 10
max-locals = 30
max-returns = 12
max-branches = 25
max-statements = 90

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "unused-import",
    "unused-argument",
    "broad-exception-caught",
    "broad-exception-raised",
    "import-outside-toplevel",
    "logging-fstring-interpolation",
    "duplicate-code",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "too-many-return-statements",
    "too-many-nested-blocks"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short --doctest-modules --doctest-glob='*.md'"
doctest_optionflags = ["NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
# Asyncio configuration to suppress warnings
asyncio_default_fixture_loop_scope = "function"
# Custom markers for test organization
markers = [
    "benchmark: marks tests as benchmark tests (deselect with '-m \"not benchmark\"')",
    "performance: marks tests as performance tests",
    "property: marks tests as property-based tests",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow running",
]
# Parallel execution options (use with pytest-xdist)
# Run with: pytest -n auto
# Filter options for different test types:
# pytest -m "not benchmark"  # Skip benchmark tests
# pytest -m "benchmark"      # Run only benchmark tests
# pytest -m "property"       # Run only property-based tests

[tool.mypy]
python_version = "3.10"
# Strict mode settings
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true
disallow_subclassing_any = true
check_untyped_defs = true
no_implicit_optional = true
strict_optional = true
strict_equality = true
# Additional strict checks
disallow_any_unimported = true
disallow_any_expr = false  # Too strict for practical use
disallow_any_decorated = true
disallow_any_explicit = false  # Allow explicit Any when needed
# Still ignore missing imports for external libraries
ignore_missing_imports = true
exclude = [
    "venv",
    ".venv",
    ".env",
    "ENV",
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".tox",
    ".nox",
    ".hypothesis",
    "__pypackages__",
    ".pdm-python",
    ".uv-cache",
    ".devcontainer",
    ".vscode",
    ".idea",
    ".ipynb_checkpoints",
    "build",
    "dist",
    "htmlcov",
    "cover",
    "migrations",
    "static",
    "media",
    "node_modules",
    "workflow_outputs",
    "parameters_info",
    "input",
    "output",
]
# Show error codes for easier debugging
show_error_codes = true
# Show column numbers
show_column_numbers = true
# Show absolute paths
show_absolute_path = true
# Enhanced type checking for test files with relaxed rules
[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_any_generics = false
disallow_untyped_decorators = false
disable_error_code = ["misc", "var-annotated", "no-untyped-call", "arg-type", "operator", "unreachable", "annotation-unchecked"]

# Relax some checks for decorator modules
[[tool.mypy.overrides]]
module = "utils.error_handling.decorators"
disable_error_code = ["misc", "unreachable"]

# Relax checks for data source modules that use decorators
[[tool.mypy.overrides]]
module = "utils.data_sources.*"
disable_error_code = ["misc"]

# Relax unreachable code warnings for capital modules (false positives)
[[tool.mypy.overrides]]
module = "utils.capital.*"
disable_error_code = ["unreachable"]

# Relax unreachable code warnings for processor modules (false positives)
[[tool.mypy.overrides]]
module = "utils.processor_hc"
disable_error_code = ["unreachable"]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
fail-under = 80
exclude = [
    "tests",
    "venv",
    ".venv",
    ".env",
    "ENV",
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".tox",
    ".nox",
    ".hypothesis",
    "__pypackages__",
    ".pdm-python",
    ".uv-cache",
    ".devcontainer",
    ".vscode",
    ".idea",
    ".ipynb_checkpoints",
    "build",
    "dist",
    "htmlcov",
    "cover",
    "migrations",
    "static",
    "media",
    "node_modules",
    "workflow_outputs",
    "parameters_info",
    "input",
    "output",
]
verbose = 2
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

[tool.hypothesis]
# Hypothesis configuration for property-based testing
max_examples = 100
deadline = 1000  # milliseconds
derandomize = false
print_blob = false
database_file = ".hypothesis/examples"
verbosity = "normal"
phases = ["explicit", "reuse", "generate", "target", "shrink", "explain"]

[tool.mutmut]
# Mutation testing configuration
paths_to_mutate = ["utils/", "china_data_downloader.py", "china_data_processor.py"]
backup = false
runner = "python -m pytest tests/ -x --tb=short --disable-warnings"
tests_dir = "tests/"
exclude_patterns = [
    "*/__pycache__/*",
    "*/test_*",
    "*/.git/*",
    "*/venv/*",
    "*/.venv/*",
    "*/.env/*",
    "*/ENV/*",
    "*/.mypy_cache/*",
    "*/.pytest_cache/*",
    "*/.ruff_cache/*",
    "*/.tox/*",
    "*/.nox/*",
    "*/.hypothesis/*",
    "*/__pypackages__/*",
    "*/.pdm-python/*",
    "*/.uv-cache/*",
    "*/.devcontainer/*",
    "*/.vscode/*",
    "*/.idea/*",
    "*/.ipynb_checkpoints/*",
    "*/build/*",
    "*/dist/*",
    "*/htmlcov/*",
    "*/.coverage*",
    "*/cover/*",
    "*/migrations/*",
    "*/static/*",
    "*/media/*",
    "*/node_modules/*",
    "*/workflow_outputs/*",
    "*/parameters_info/*",
    "*/input/*",
    "*/output/*",
]
# Enable incremental mode for faster re-runs
use_patch_file = true
# Enable parallel execution (adjust based on CPU cores)
processes = 4
# Use coverage to only mutate covered lines
use_coverage = true
# Coverage file to use
coverage_file = ".coverage"

[tool.radon]
# Radon configuration for code complexity analysis (2024-2025 best practices)
# Exclude patterns aligned with other tools for consistency
exclude = [
    # Cache and build directories
    "*/__pycache__/*",
    "*/.git/*",
    "*/build/*",
    "*/dist/*",

    # Virtual environments
    "*/.venv/*",
    "*/venv/*",
    "*/.env/*",
    "*/ENV/*",

    # Modern cache directories (2024-2025)
    "*/.ruff_cache/*",
    "*/.mypy_cache/*",
    "*/.pytest_cache/*",
    "*/.tox/*",
    "*/.nox/*",
    "*/.hypothesis/*",

    # Package managers and build artifacts
    "*.egg-info/*",
    "*/__pypackages__/*",
    "*/.pdm-python/*",
    "*/.uv-cache/*",

    # Development tools and IDEs
    "*/.ipynb_checkpoints/*",
    "*/.devcontainer/*",
    "*/.vscode/*",
    "*/.idea/*",

    # Coverage and testing
    "*/htmlcov/*",
    "*/.coverage*",
    "*/cover/*",

    # Framework-specific
    "*/migrations/*",
    "*/static/*",
    "*/media/*",
    "*/node_modules/*",

    # Project-specific directories
    "*/workflow_outputs/*",
    "*/parameters_info/*",
    "*/input/*",
    "*/output/*",

    # Test files (optional - can be included if you want to analyze test complexity)
    "*/tests/*",
    "*test_*.py",
    "*_test.py",
]

# Radon command-specific settings
cc_min = "A"  # Minimum complexity rank to display (A-F)
cc_max = "F"  # Maximum complexity rank to display
show_complexity = true  # Show complexity scores
average = true  # Calculate average complexity
