# Ruff configuration for 2025 best practices
# See https://docs.astral.sh/ruff/configuration/
# Updated to latest Ruff v0.11+ best practices
# Compatible with Ruff v0.11.10 and later

# Python version target (updated for 2025)
target-version = "py313"

# Same as Black
line-length = 120
indent-width = 4

# Exclude common directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    # Additional 2024-2025 patterns
    ".env",
    "ENV",
    ".hypothesis",
    ".pdm-python",
    ".uv-cache",
    ".devcontainer",
    ".idea",
    "htmlcov",
    ".coverage*",
    "cover",
    "migrations",
    "static",
    "media",
    # Project-specific directories
    "workflow_outputs",
    "parameters_info",
    "input",
    "output",
]

[lint]
# Enable a comprehensive set of rules
select = [
    # Core style and error checking
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes

    # Code modernization
    "UP",     # pyupgrade
    "FURB",   # refurb - modernize Python code

    # Bug and code smell detection
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify

    # Import management
    "I",      # isort
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking

    # Naming conventions
    "N",      # pep8-naming

    # Documentation
    "D",      # pydocstyle

    # Complexity
    "C90",    # mccabe complexity

    # Type annotations
    "ANN",    # flake8-annotations
    "FA",     # flake8-future-annotations

    # Security rules
    "S",      # flake8-bandit (security)

    # Error handling
    "BLE",    # flake8-blind-except
    "TRY",    # tryceratops
    "EM",     # flake8-errmsg
    "RSE",    # flake8-raise

    # Best practices
    "FBT",    # flake8-boolean-trap
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EXE",    # flake8-executable
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "LOG",    # flake8-logging - logging best practices
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate

    # Framework-specific
    "PD",     # pandas-vet
    "NPY",    # NumPy-specific rules
    "AIR",    # Airflow

    # Async programming
    "ASYNC",  # async/await best practices
    "ASYNC1", # Async framework patterns (formerly TRIO)

    # Performance
    "PERF",   # Perflint - performance linting

    # Meta-linters
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "FLY",    # flynt
    "RUF",    # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    # Keep some docstring rules disabled for now, but enable more
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    # Enable more annotation rules by removing some ignores
    "ANN401", # Dynamically typed expressions (Any) - keep for flexibility
    "S101",   # Use of assert detected
    "T201",   # Print found
    "T203",   # pprint found
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default value in function definition
    "COM812", # Missing trailing comma (conflicts with formatter)
    "ISC001", # Single line implicit string concatenation (conflicts with formatter)
    "UP017",  # Use datetime.UTC alias (Python 3.11+ only, maintain 3.10 compatibility)
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Ignore specific rules in test files
"tests/**/*.py" = [
    "S101",   # asserts are fine in tests
    "ARG",    # unused arguments are common in fixtures
    "FBT",    # boolean traps are common in tests
    "PLR2004", # Magic values are fine in tests
    "D",      # Don't require docstrings in tests
    "ANN",    # Don't require type annotations in tests
    "PD901",  # Generic DataFrame names are fine in tests
    "BLE001", # Blind except is sometimes needed in tests
    "ASYNC1", # Async rules relaxed in tests
    "LOG",    # Logging rules relaxed in tests
]

# Special rules for factory files
"tests/factories.py" = [
    "S101",   # asserts are fine in tests
    "ARG",    # unused arguments are common in fixtures
    "FBT",    # boolean traps are common in tests
    "PLR2004", # Magic values are fine in tests
    "D",      # Don't require docstrings in tests
    "ANN",    # Don't require type annotations in tests
    "PD901",  # Generic DataFrame names are fine in tests
    "BLE001", # Blind except is sometimes needed in tests
    "N802",   # Function names can match economic variable names
    "N805",   # Factory methods use 'obj' parameter by convention
    "S311",   # Pseudo-random is fine for test data generation
    "RUF013", # Implicit Optional is acceptable in test factories
    "NPY002", # Legacy numpy random is fine for test data
    "TRY003", # Long exception messages are fine in tests
    "EM102",  # F-string exceptions are fine in tests
]

# Ignore import violations in __init__ files
"__init__.py" = ["F401", "F403"]

# Allow performance overhead in retry logic
"utils/data_sources/wdi_downloader.py" = ["PERF203"]
"utils/error_handling/decorators.py" = ["PERF203"]

# Allow TRY300 where it conflicts with pylint no-else-return/no-else-raise
"utils/data_sources/fallback_loader.py" = ["TRY300"]
"utils/data_sources/fallback_utils.py" = ["TRY300"]
"utils/data_sources/imf_loader.py" = ["TRY300"]
"utils/error_handling/validators.py" = ["TRY300"]
"utils/extrapolation_methods/average_growth_rate.py" = ["TRY300"]

# Enhanced per-file ignores for better granularity
"examples/**/*.py" = [
    "T201", "T203", # Allow prints and relaxed docs in examples
    "D", "ANN"      # Relaxed documentation and annotations
]

"scripts/**/*.py" = [
    "T201", "S602", "S603"  # Allow prints and subprocess in scripts
]

[lint.isort]
known-first-party = ["utils"]

[lint.mccabe]
max-complexity = 10

[lint.pydocstyle]
convention = "google"

[lint.pylint]
max-args = 10
max-branches = 25
max-returns = 12
max-statements = 90

[format]
# Like Black, use double quotes for strings
quote-style = "double"

# Like Black, indent with spaces
indent-style = "space"

# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false

# Like Black, automatically detect line ending
line-ending = "auto"

# Enable formatting of code in docstrings
docstring-code-format = true

# Format code in docstrings with dynamic line length
docstring-code-line-length = "dynamic"
